{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/taeeun/Desktop/Programming/Projects/work-time-calc/pages/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport useWindowSize from '../hooks/useWindowSize';\nvar Main = styled.main.withConfig({\n  displayName: \"pages__Main\",\n  componentId: \"cqz4mh-0\"\n})([\"background-color:#eceae9;display:flex;justify-content:center;align-items:center;\"]);\n_c = Main;\nvar FileInput = styled.label.withConfig({\n  displayName: \"pages__FileInput\",\n  componentId: \"cqz4mh-1\"\n})([\"color:#4c4a49;font-family:'GmarketSansMedium','\\uB098\\uB214\\uACE0\\uB515',NanumGothic,'\\uB3CB\\uC6C0',Dotum,sans-serif;font-size:3.5rem;line-height:2;text-shadow:1px 1px 1px #5c5a59;&:hover{transform:scale(1.1);transition:all 0.1s ease;};\"]);\n_c2 = FileInput;\nvar Button = styled.button.withConfig({\n  displayName: \"pages__Button\",\n  componentId: \"cqz4mh-2\"\n})([\"color:#4c4a49;font-family:'GmarketSansMedium','\\uB098\\uB214\\uACE0\\uB515',NanumGothic,'\\uB3CB\\uC6C0',Dotum,sans-serif;font-size:3.5rem;line-height:2;text-shadow:1px 1px 1px #5c5a59;&:hover{transform:scale(1.1);transition:all 0.1s ease;};\"]);\n_c3 = Button;\n\nvar Home = function Home() {\n  _s();\n\n  var winSize = useWindowSize();\n\n  var _useState = useState(null),\n      mainFile = _useState[0],\n      setMainFile = _useState[1];\n\n  var parseFile = function parseFile(e) {\n    var reader = new FileReader();\n    console.log('test');\n\n    var getElem = function getElem(sheet, i, R) {\n      var tmp = sheet[XLSX.utils.encode_cell({\n        c: i,\n        r: R\n      })];\n      var elem = 'UNKNOWN';\n      if (tmp && tmp.t) elem = XLSX.utils.format_cell(tmp);\n      return elem;\n    };\n\n    reader.onload = function () {\n      var fileData = reader.result;\n      var wb = XLSX.read(fileData, {\n        type: 'binary'\n      });\n      var firstSheetName = wb.SheetNames[0];\n      var sheet = wb.Sheets[firstSheetName];\n      var mainSheet = [];\n      var range = XLSX.utils.decode_range(sheet['!ref']);\n\n      for (var R = 2; R <= range.e.r; ++R) {\n        var rowData = [];\n        rowData.push(getElem(sheet, 0, R));\n        rowData.push(getElem(sheet, 1, R));\n        rowData.push(getElem(sheet, 2, R));\n        mainSheet.push(rowData);\n      }\n\n      setMainFile(mainSheet);\n    };\n\n    reader.readAsBinaryString(e.target.files[0]);\n  };\n\n  var getResult = function getResult() {\n    console.log(mainSheet);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Main, {\n    style: {\n      height: winSize[1]\n    },\n    children: [/*#__PURE__*/_jsxDEV(FileInput, {\n      children: [\"\\uD30C\\uC77C \\uC62C\\uB9AC\\uAE30\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: 'none'\n        },\n        onChange: parseFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: getResult,\n      children: \"\\uACB0\\uACFC \\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Home, \"xLhMBlDHdKGDYJaIrgoytXkYTfA=\", false, function () {\n  return [useWindowSize];\n});\n\n_c4 = Home;\nexport default Home;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"FileInput\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"Home\");","map":{"version":3,"sources":["/Users/taeeun/Desktop/Programming/Projects/work-time-calc/pages/index.js"],"names":["React","useState","styled","useWindowSize","Main","main","FileInput","label","Button","button","Home","winSize","mainFile","setMainFile","parseFile","e","reader","FileReader","console","log","getElem","sheet","i","R","tmp","XLSX","utils","encode_cell","c","r","elem","t","format_cell","onload","fileData","result","wb","read","type","firstSheetName","SheetNames","Sheets","mainSheet","range","decode_range","rowData","push","readAsBinaryString","target","files","getResult","height","display"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components';\nimport useWindowSize from '../hooks/useWindowSize';\n\nconst Main = styled.main`\n    background-color:#eceae9;\n\n    display:flex;\n    justify-content:center;\n    align-items:center;\n`;\n\nconst FileInput = styled.label`\n    color:#4c4a49;\n    font-family: 'GmarketSansMedium', '나눔고딕', NanumGothic, '돋움', Dotum, sans-serif;\n    font-size: 3.5rem;\n    line-height:2;\n    text-shadow:1px 1px 1px #5c5a59;\n\n    &:hover {\n        transform: scale(1.1);\n        transition: all 0.1s ease;\n    };\n`;\n\nconst Button = styled.button`\n    color:#4c4a49;\n    font-family: 'GmarketSansMedium', '나눔고딕', NanumGothic, '돋움', Dotum, sans-serif;\n    font-size: 3.5rem;\n    line-height:2;\n    text-shadow:1px 1px 1px #5c5a59;\n\n    &:hover {\n        transform: scale(1.1);\n        transition: all 0.1s ease;\n    };\n`;\n\nconst Home = () => {\n    const winSize = useWindowSize();\n    const [mainFile, setMainFile] = useState(null);\n\n    const parseFile = (e) => {\n        const reader = new FileReader();\n        console.log('test');\n\n        const getElem = (sheet, i, R) => {\n            let tmp = sheet[XLSX.utils.encode_cell({c:i, r:R})]\n            let elem = 'UNKNOWN';\n            if(tmp && tmp.t) elem = XLSX.utils.format_cell(tmp);\n        \n            return elem;\n        }\n    \n        reader.onload = () => {\n            const fileData =  reader.result;\n            const wb = XLSX.read(fileData, {type : 'binary'});\n            const firstSheetName = wb.SheetNames[0];\n            const sheet = wb.Sheets[firstSheetName];\n            \n            const mainSheet = []; \n            let range = XLSX.utils.decode_range(sheet['!ref']);\n\n            for(let R=2; R<=range.e.r; ++R) {\n                let rowData = [];\n                \n                rowData.push(getElem(sheet, 0, R));\n                rowData.push(getElem(sheet, 1, R));\n                rowData.push(getElem(sheet, 2, R));\n\n                mainSheet.push(rowData);\n            }\n\n            setMainFile(mainSheet);\n        }\n        \n        reader.readAsBinaryString(e.target.files[0]);\n    };\n\n    const getResult = () => {\n        console.log(mainSheet);\n    };\n\n    return (\n        <Main style={{height:winSize[1]}}>\n            <FileInput>\n                파일 올리기\n                <input type=\"file\" style={{display:'none'}} onChange={parseFile} />\n            </FileInput>\n            <Button onClick={getResult}>\n                결과 보기\n            </Button>\n        </Main>\n    );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}